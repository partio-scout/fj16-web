<?php

include_once 'fj16_job_ads.features.inc';

use Thybag\SharePointAPI;
require 'vendor/autoload.php';

define('FJ16_SHAREPOINT_CONFIG_FILE', '../sharepoint-integration.conf.php');
define('FJ16_JOBS_CURRENT_ROUND', '4. Toukokuu 2015');
define('FJ16_JOBS_CONTINUOUS_ROUND', '- Erillishaku');
define('FJ16_JOBS_PUBLIC_YES', 'Kyllä');
define('FJ16_JOBS_STATUS_PUBLIC', '4. Julkaistu');


// Drupal hooks


function fj16_job_ads_cron() {
  fj16_job_ads_import_jobs();
  fj16_job_ads_export_applications();
}


function fj16_job_ads_menu() {
  $menu = array();
  $menu['monitoring'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => '_fj16_job_ads_monitoring',
    'delivery callback' => '_fj16_job_ads_deliver_json'
  );
  return $menu;
}


// Job import


function fj16_job_ads_import_jobs() {
  watchdog('fj16_job_ads', 'Begin job import from SharePoint', array(), WATCHDOG_INFO);
  $import_started_time = time();

  //$config = fj16_job_ads_get_config();
  //$jobs = fj16_job_ads_read_sharepoint_list($config['job_list_guid']);
  $jobs = fj16_get_jobs_from_adapter();
  if($jobs === FALSE || count($jobs) === 0) {
    watchdog('fj16_job_ads', 'SharePoint import failed', array(), WATCHDOG_ERROR);
    variable_set('fj16_job_import_success', FALSE);
    return;
  }

  $jobs_to_remove = fj16_get_job_nids_for_all_langs();
  $accepted_languages = array('fi', 'sv', 'en');

  // Create or update new jobs
  foreach ($jobs as $job) {
    if(fj16_job_should_be_displayed($job)) {
      
      foreach ($accepted_languages as $lang) {
        $nid = fj16_job_ads_create_or_update($job, $lang);
        if($nid) {
          unset($jobs_to_remove[$nid]);
        }
      }
    }
  }

  // Remove existing jobs that should not be displayed as per criteria, or that have been removed from SharePoint
  foreach ($jobs_to_remove as $nid) {
    node_delete($nid);
  }

  watchdog('fj16_job_ads', '@num_synced jobs synced from SharePoint, @num_removed removed in @duration seconds',
    array(
      '@num_synced' => count($jobs),
      '@num_removed' => count($jobs_to_remove),
      '@duration' => (time() - $import_started_time)
    ), WATCHDOG_INFO);

  variable_set('fj16_job_import_success', TRUE);
}


function fj16_job_should_be_displayed($job) {
  if($job['pestauksen_x0020_tila'] !== FJ16_JOBS_STATUS_PUBLIC) {
    return FALSE;
  }

  if($job['hakuryhm_x00e4_'] !== FJ16_JOBS_CURRENT_ROUND && $job['hakuryhm_x00e4_'] !== FJ16_JOBS_CONTINUOUS_ROUND) {
    return FALSE;
  }

  if($job['julkinen_x0020_haku'] !== FJ16_JOBS_PUBLIC_YES) {
    return FALSE;
  }

  $closing_date = DateTime::createFromFormat('Y-m-d H:i:s', $job['haku_x0020_p_x00e4__x00e4_ttyy_x']);
  // Original date is the last day one can apply - thus the application closes 1 day later
  $closing_date->add(new DateInterval('P1D'));
  $now = new DateTime();
  if($closing_date < $now) {
    return false;
  }

  return TRUE;
}


function fj16_job_ads_create_or_update($job, $lang) {
  $node;
  $guid = fj16_sharepoint_lookup_value($job['uniqueid']);

  $title_field = _fj16_get_title_field($lang);

  //If the title field for this language does not exist, return immediately without creating anything
  if(!isset($job[$title_field]) || strlen($job[$title_field]) === 0) {
    return;
  }

  if(fj16_job_exists($guid, $lang)) {
    $node = fj16_get_job_by_guid($guid, $lang);
    $node->title = $job[$title_field];
  } else {
    $node = fj16_job_ads_new_node($job[$title_field], $lang);
  }
  
  fj16_job_update_node_fields($node, $job, $lang);
  $node = node_submit($node);
  node_save($node);

  return $node->nid;
}

function _fj16_get_title_field($lang) {
  $field_names = array(
    'fi' => 'title',
    'sv' => 'pestin_x0020_nimi_x0020_ruotsiks',
    'en' => 'pestin_x0020_nimi_x0020_englanni'
  );
  return $field_names[$lang];
}

function fj16_job_ads_new_node($title, $lang = 'fi') {
  $node = new stdClass();
  $node->title = $title;
  $node->type = 'fj16_job';
  node_object_prepare($node);
  $node->language = $lang;
  $node->uid = 1;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  return $node;
}


function fj16_job_update_node_fields(&$node, $job, $lang) {
  $mappings = fj16_job_ads_get_field_mappings($lang);

  foreach ($mappings as $sharepoint_field => $drupal_field) {
    if(!isset($job[$sharepoint_field])) {
      continue;
    }

    $node->$drupal_field = array(
      LANGUAGE_NONE => array(
        array('value' => fj16_job_value_clean($job[$sharepoint_field]))
      )
    );
  }

  // body and field_requirements need an input format as they may contain HTML
  $node->body[LANGUAGE_NONE][0]['format'] = 'fj16_job_content';
  $node->field_requirements[LANGUAGE_NONE][0]['format'] = 'fj16_job_content';

  //Organization ends up in two fields, department and team
  $org_parts = explode(':', $job['organisaatio_x0020__x0028_j_x002']);
  $department = fj16_map_department($org_parts[1]); // Level 0 is whole organization
  $node->field_department[LANGUAGE_NONE][0]['value'] = $department;
  $team = end($org_parts);
  $node->field_team[LANGUAGE_NONE][0]['value'] = $team;

  // sharepoint GUID has the line id prepended, remove that
  $node->field_sharepoint_guid[LANGUAGE_NONE][0]['value'] = fj16_sharepoint_lookup_value($node->field_sharepoint_guid[LANGUAGE_NONE][0]['value']);
}

function fj16_job_value_clean($value) {
  $value = str_replace('&nbsp;', ' ', $value);
  $value = str_replace('&#160;', ' ', $value);
  return $value;
}


// Mapping SharePoint values to Drupal


function fj16_job_ads_get_field_mappings($lang) {
  //Title needs to be mapped separately, as it's not a Fields field
  $mappings = array(
    'pestin_x0020_taso_x0020__x0028_j'  => 'field_level',
    'lis_x00e4_tietoja_x0020_antaa_x0'  => 'field_info_contact',
    'id' => 'field_sharepoint_line_id',
    'uniqueid' => 'field_sharepoint_guid',
    'haku_x0020_p_x00e4__x00e4_ttyy_x' => 'field_sharepoint_closing_date'
  );

  if($lang == 'fi') {
    $mappings['ulkoinen_x0020_kuvaus_x0020_nett'] = 'body';
    $mappings['vaatimukset'] = 'field_requirements';
  } else if($lang == 'sv') {
    $mappings['ulkoinen_x0020_kuvaus_x0020_ruot'] = 'body';
    $mappings['vaatimukset_x0020_ruotsiksi_x002'] = 'field_requirements';
  } else if($lang == 'en') {
    $mappings['ulkoinen_x0020_kuvaus_x0020_engl'] = 'body';
    $mappings['julkinen_x0020_kuvaus_x0020_engl'] = 'field_requirements'; //this field is named inconsistently due to historical reasons, julkinen_x0020_kuvaus_x0020_engl is correct.
  }

  return $mappings;
}


function fj16_map_department($title) {
  $mappings = array(
    'Elämys' => 'elamys',
    'Kasvatus' => 'kasvatus',
    'Palvelu' => 'palvelu',
    'Resurssi' => 'resurssi',
    'Yhteistyö' => 'yhteistyo'
  );
  return $mappings[$title];
}


function fj16_sharepoint_lookup_value($raw) {
  return substr($raw, strpos($raw, '#') + 1);
}


// Job lookup


function fj16_job_exists($guid, $lang) {
  $nids = fj16_get_job_nids();
  return isset($nids[$guid][$lang]);
}


function fj16_get_job_by_guid($guid, $lang) {
  $job_nids_by_guid = fj16_get_job_nids();
  return node_load($job_nids_by_guid[$guid][$lang]);
}


function fj16_get_job_nids() {
  $query = db_select('field_data_field_sharepoint_guid', 'f');
  $query->join('node', 'n', 'n.nid = f.entity_id');
  $query
    ->fields('f', array('entity_id', 'field_sharepoint_guid_value'))
    ->fields('n', array('language'))
    ->condition('f.bundle', 'fj16_job')
    ->condition('f.deleted', 0);
  $result = $query->execute();

  $job_nids_by_guid = array();
  foreach ($result as $row) {
    $nid  = $row->entity_id;
    $guid = $row->field_sharepoint_guid_value;
    $lang = $row->language;
    $job_nids_by_guid[$guid][$lang] = $nid;
  }
  return $job_nids_by_guid;
}

function fj16_get_job_nids_for_all_langs() {
  $nids_by_lang = fj16_get_job_nids();
  $flat_nids = array();
  foreach ($nids_by_lang as $langs) {
    foreach($langs as $nid) {
      $flat_nids[$nid] = $nid;
    }
  }
  return $flat_nids;
}


// Job application export


function fj16_job_ads_export_applications() {
  $previous_application_id = -1;
  while($application = fj16_job_ads_get_first_application('WAITING')) {
    if($application['application_id'] === $previous_application_id) {
      // Something failed when prcessing previous item and it has stayed in WAITING state
      watchdog('fj16_job_ads', 'Processing application #@id failed: stayed in WAITING state. Export aborted.', array('@id' => $application['application_id']), WATCHDOG_ERROR);
      break;
    }

    fj16_job_ads_export_application($application);

    $previous_application_id = $application['application_id'];
  }
}

function fj16_job_ads_export_application($application) {
  // Change state to prevent reprocessing if there's an error
  $application['status'] = 'PROCESSING';
  fj16_job_ads_save_application($application);
  watchdog('fj16_job_ads', 'Processing application #@id', array('@id' => $application['application_id']), WATCHDOG_INFO);

  $success = fj16_job_ads_save_application_to_backend($application);

  if($success) {
    watchdog('fj16_job_ads', 'Application #@id synced successfully', array('@id' => $application['application_id']), WATCHDOG_INFO);
    $application['status'] = 'SYNCED';
    fj16_job_ads_save_application($application);
  } else {
    watchdog('fj16_job_ads', 'Application #@id syncing failed', array('@id' => $application['application_id']), WATCHDOG_ERROR);
    $application['status'] = 'ERROR';
    fj16_job_ads_save_application($application);
  }

}

function fj16_job_ads_get_first_application($state) {
  $applications = fj16_job_ads_get_applications($state);
  if(count($applications) > 0) {
    return $applications[0];
  }
  return FALSE;
}

function fj16_job_ads_get_applications($status) {
  return db_select('fj16_job_applications', 'applications')
    ->fields('applications')
    ->condition('status', $status)
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
}

function fj16_job_ads_save_application($application) {
  // Determine if this is new (no primary keys) or not (with primary keys)
  $primary_keys = empty($application['application_id']) ? NULL : 'application_id';
  $result = drupal_write_record('fj16_job_applications', $application, $primary_keys);
}

function fj16_job_ads_save_application_to_backend($application) {
  $conf = fj16_job_ads_get_config();
  $url = $conf['adapter_endpoint'] . '?secret=' . $conf['secret'];
  $response = drupal_http_request($url, array(
    'method' => 'POST',
    'data' => json_encode(fj16_job_ads_to_adapter_format($application))
  ));

  if($response->code === '200') {
    $result_json = json_decode($response->data, TRUE);
    return ($result_json['result'] === 'OK'); // Success
  }

  return FALSE;
}

function fj16_job_ads_to_adapter_format($application) {
  return array(
    "Pesti_lookup" => $application['job_rowid'],
    "Title" => $application['name'],
    "Email" => $application['email'],
    "Puhelinnumero" => $application['phone'],
    "Lippukunta_x0020_ja_x0020_piiri" => $application['troop_and_district'],
    "Nykyiset_x0020_partiopestit" => $application['current_jobs'],
    "Partiokokemus" => $application['previous_scouting_experience'],
    "Partion_x0020_ulkopuolinen_x0020" => $application['previous_other_experience'],
    "Perustelut" => $application['reasons_for_applying'],
    "Ko_x002d_Gi_x0020_119" => $application['kogi_119'],
    "Kommentit" => $application['comments']
  );
}


// Job form


function fj16_job_ads_node_view($node, $view_mode, $langcode) {
  if($node->type == 'fj16_job' && $view_mode == 'full') {
    $node->content['fj16_job_application_form'] = drupal_get_form('fj16_job_application_form', $node);
    $node->content['fj16_job_application_form']['#weight'] = 1000;
  }
}


function fj16_job_application_form($form, &$form_state, $job_node) {
  if(empty($job_node->nid)) {
    return;
  }

  $form['heading'] = array(
    '#markup' => '<h2>' . t('Apply for position') . '</h2>'
  );

  $form['instructions'] = array(
    '#markup' => '<p>' . t('The applicants will be informed personally about the recruitment decision.') . '</p>'
  );

  // Title for emails

  $form['job_title'] = array(
    '#type' => 'value',
    '#value' => $job_node->title
  );

  // Job refrences
  
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $job_node->nid
  );
  $form['job_guid'] = array(
    '#type' => 'value',
    '#value' => $job_node->field_sharepoint_guid[LANGUAGE_NONE][0]['value']
  );
  $form['job_rowid'] = array(
    '#type' => 'value',
    '#value' => $job_node->field_sharepoint_line_id[LANGUAGE_NONE][0]['value']
  );

  // Contact info etc.

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#required' => TRUE,
    '#element_validate' => array('fj16_email_validate')
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
    '#required' => TRUE,
  );
  $form['troop_and_district'] = array(
    '#type' => 'textfield',
    '#title' => t('Country and NSO/NSA/MO'),
    '#required' => TRUE,
  );
  $form['current_jobs'] = array(
    '#type' => 'textfield',
    '#title' => t('Current scouting positions'),
    '#required' => TRUE,
  );

  // Free-form application

  $form['reasons_for_applying'] = array(
    '#type' => 'textarea',
    '#title' => t('Why are you applying for this position?'),
    '#required' => TRUE,
  );
  $form['previous_scouting_experience'] = array(
    '#type' => 'textarea',
    '#title' => t('Why would you be good in this position? What useful scouting experience do you have?'),
    '#required' => TRUE,
  );
  $form['previous_other_experience'] = array(
    '#type' => 'textarea',
    '#title' => t('Other relevant experience'),
    '#required' => TRUE,
  );
  $form['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional information'),
    '#description' => t('This can be e.g. a link to an attachment for your application.')
  );

  $form['kogi_119'] = array(
    '#type' => 'value',
    '#value' => '0'
  );

  // KoGi enrollment
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send application')
  );

  return $form;
}

function fj16_job_ads_form_fj16_job_application_form_alter(&$form, &$form_state, $form_id) {
  honeypot_add_form_protection($form, $form_state, array('honeypot'));
}

function fj16_email_validate($element, &$form_state, $form) {
  if(!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
}

function fj16_job_application_form_submit($form, &$form_state) {
  $fields_to_save = array(
    'nid',
    'job_guid',
    'job_rowid',
    'name',
    'phone',
    'email',
    'troop_and_district',
    'current_jobs',
    'previous_scouting_experience',
    'previous_other_experience',
    'reasons_for_applying',
    'kogi_119',
    'comments'
  );

  $record = array();
  foreach ($fields_to_save as $field_name) {
    $record[$field_name] = $form_state['values'][$field_name];
  }
  $record['status'] = 'WAITING'; // default
  
  $result = drupal_write_record('fj16_job_applications', $record);

  if($result == SAVED_NEW) {
    drupal_set_message(t('Welcome to Roihu staff! Your application for the position has been received. We are presently in the process of reviewing each applicants resume. We will contact you after deadline.'));
    $form_state['redirect'] = 'pestit';
  } else {
    drupal_set_message(t('Your application was not saved due to a technical problem. Please try again later.'), 'error');
    watchdog('fj16_job_ads', 'Unable to save application by @name (@email) fo job @job_title',
      array('@name' => $record['name'], '@email' => $record['email'], '@job_guid' => $form_state['values']['job_title']),
      WATCHDOG_ERROR, 'node/' . $record['nid']);
  }
}


// SharePoint integration


function fj16_get_jobs_from_adapter() {
  $conf = fj16_job_ads_get_config();
  $url = $conf['adapter_endpoint'] . '?secret=' . $conf['secret'];
  $content = file_get_contents($url);
  if($content === FALSE) {
    return FALSE;
  }
  return json_decode($content, TRUE);
}


function fj16_job_ads_get_config() {
  if(!file_exists(FJ16_SHAREPOINT_CONFIG_FILE)) {
    return false;
  }
  require(FJ16_SHAREPOINT_CONFIG_FILE);
  return $fj16_sharepoint_config; // defined in require()'d file
}


function fj16_job_ads_read_sharepoint_list($list_guid) {
  $service_provider = fj16_job_ads_initialize_sharepoint_client();
  if($service_provider === FALSE) {
    return; // No credentials file or other problem
  } else {
    return $service_provider->query($list_guid)->all_fields()->get();
  }
}


function fj16_job_ads_initialize_sharepoint_client() {
  $config = fj16_job_ads_get_config();

  if($config) {
    return new SharePointAPI(
      $config['username'],
      $config['password'],
      $config['wsdl_url'],
      $config['auth_variant']
    );
  }
  return false;
}


// Integration monitoring endpoint


function _fj16_job_ads_monitoring() {
  drupal_page_is_cacheable(FALSE);

  $import_success = variable_get('fj16_job_import_success', TRUE);
  $export_success = !fj16_jobs_is_export_in_error_state();
  return array(
    'sharepoint_job_import' => $import_success ? 'SUCCESS' : 'ERROR',
    'sharepoint_job_applications_export' => $export_success ? 'SUCCESS' : 'ERROR'
  );
}

function _fj16_job_ads_deliver_json($result) {
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print json_encode($result);
}

function fj16_jobs_count_applications_by_status($status) {
  return db_select('fj16_job_applications')
    ->condition('status', $status)
    ->countQuery()
    ->execute()
    ->fetchField();
}

function fj16_jobs_is_export_in_error_state() {
  $count_errors = fj16_jobs_count_applications_by_status('ERROR');
  $count_processing = fj16_jobs_count_applications_by_status('PROCESSING');
  // Applications are processed one at a time. If ther's more, that means an export has failed.
  return $count_errors > 0 || $count_processing > 1;
}

// Strings to for by automatic extraction of localizable strings - do not remove

t('Position type');
t('Apply by');

// Job levels
t('Director');
t('Manager');
t('Team leader');
t('Subteam leader');
t('IST');
t('Other');

// Roihu org sections
t('Experience');
t('Education');
t('Service');
t('Resource');
t('Co-operation');
