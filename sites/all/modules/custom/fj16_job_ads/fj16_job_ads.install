<?php

function fj16_job_ads_update_7001() {
  drupal_install_schema('fj16_job_ads');
}

function fj16_job_ads_update_7004() {
  if(db_field_exists('fj16_job_applications', 'comments')) {
    return;
  }
  db_add_field('fj16_job_applications', 'comments', array(
    'description' => 'Free form comments',
    'type' => 'text'
  ));
}

function fj16_job_ads_update_7005() {
  module_enable(array('honeypot'));
}

function fj16_job_ads_update_7006() {
  if(db_field_exists('fj16_job_applications', 'application_id')) {
    return;
  }
  db_add_field('fj16_job_applications', 'application_id', array(
    'description' => 'Primary key',
    'type' => 'serial',
    'not null' => TRUE
  ), array(
    'primary key' => array('application_id')
  ));
}

function fj16_job_ads_update_7007() {
  $query = db_query('SELECT nid FROM {node} WHERE {node}.type = :type;', array(':type' => 'fj16_job'));
  foreach($query as $row) {
    node_delete($row->nid);
  }
  drupal_cron_run();
}

function fj16_job_ads_update_7008() {
  // fj16_base.module needs to be included to access fj16_import_translation()
  require_once(drupal_get_path('module', 'fj16_base') . '/fj16_base.module');
  fj16_import_translation('fj16_job_ads', 'fi');
  fj16_import_translation('fj16_job_ads', 'sv');
}

function fj16_job_ads_update_9000() {
  // fj16_base.module needs to be included to access fj16_import_translation()
  require_once(drupal_get_path('module', 'fj16_base') . '/fj16_base.module');
  fj16_import_translation('fj16_job_ads', 'fi');
  fj16_import_translation('fj16_job_ads', 'sv');
}

function fj16_job_ads_update_7011() {
  //Update swedish translation
  require_once(drupal_get_path('module', 'fj16_base') . '/fj16_base.module');
  fj16_import_translation('fj16_job_ads', 'sv');
}

function fj16_job_ads_update_7012() {
  $field_names = array(
    'field_jm_work',
    'field_jm_analytic_creative',
    'field_jm_planning_doing',
    'field_jm_leading_doing',
    'field_jm_individual_group',
    'field_jm_traditional_modern',
    'field_jm_growing_marketing',
    'field_jm_macro_micro',
    'field_jm_fun_important'
  );
  foreach ($field_names as $field_name) {
    if(field_info_field($field_name) !== NULL) {
      field_delete_field($field_name);
    }
  }
  field_purge_batch(1000); // actually delete all data, instances and base of these fields
}

function fj16_job_ads_schema() {
  $schema = array();

  $schema['fj16_job_applications'] = array(
    'description' => 'Unsynced job applications',
    'fields' => array(

      'nid' => array(
        'description' => 'Nid of locally synced job',
        'type' => 'int'
      ),
      'job_guid' => array(
        'description' => 'SharePoint GUID of job',
        'type' => 'varchar',
        'length' => '255'
      ),
      'job_rowid' => array(
        'description' => 'SharePoint list line id of job',
        'type' => 'int'
      ),
      'status' => array(
        'description' => 'Status of the syncing process',
        'type' => 'varchar',
        'length' => '32'
      ),
      
      'name' => array(
        'description' => 'Applicant name',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'email' => array(
        'description' => 'Applicant email',
        'type' => 'varchar',
        'length' => '255'
      ),
      'phone' => array(
        'description' => 'Applicant phone number',
        'type' => 'varchar',
        'length' => '255'
      ),
      'troop_and_district' => array(
        'description' => 'Applicant troop and district',
        'type' => 'varchar',
        'length' => '255'
      ),
      'current_jobs' => array(
        'description' => "Applicant's current jobs in scouting",
        'type' => 'varchar',
        'length' => '255'
      ),

      'previous_scouting_experience' => array(
        'description' => 'Previous scouting experience',
        'type' => 'text'
      ),
      'previous_other_experience' => array(
        'description' => 'Other experience',
        'type' => 'text'
      ),
      'reasons_for_applying' => array(
        'description' => 'Reasons for applying',
        'type' => 'text'
      ),
      
      'kogi_119' => array(
        'description' => 'Does applicant wish to attend KoGi 119 - 1 (yes) or 0 (no)',
        'type' => 'int'
      ),

      'comments' => array(
        'description' => 'Free form comments',
        'type' => 'text'
      ),

      'application_id' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'not null' => TRUE
      )
    ),

    'primary key' => array('application_id')
  );

  return $schema;
}
